plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'

	// Checking and fixing code style
	// Details are here: https://github.com/diffplug/spotless
	id "com.diffplug.spotless" version "6.25.0"

	// Checks if code is clean using SonarQube
	// Details are here: https://docs.sonarsource.com/sonarqube-server/latest/analyzing-source-code/scanners/sonarscanner-for-gradle/
	id "org.sonarqube" version "6.0.1.5171"

	// Finds bugs in Java code
	// Details are here: https://spotbugs.readthedocs.io/en/latest/introduction.html
	id "com.github.spotbugs" version "6.0.27"

	// Higlights simple mistakes in Java code
	// Details are here: https://errorprone.info/
	id "net.ltgt.errorprone" version "4.1.0"
}

group = 'dev.andrylat'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Mandatory dependency for Error Prone plugin.
	errorprone "com.google.errorprone:error_prone_core:2.35.1"

	// Lombok
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	// Spring
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	// WebSockets
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// Kafka
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
	
	// Tests
	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.apache.kafka:kafka-streams-test-utils'
	
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

	// Awesome library for testing features which needs some delay during execution
	// Details: http://www.awaitility.org/
	testImplementation 'org.awaitility:awaitility:4.2.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configuration of Spotless
spotless {
  java {
    importOrder()
    removeUnusedImports()
    googleJavaFormat()
  }
}

// After build code will be formatted automatically.
afterEvaluate {
	def spotless = tasks.findByName('spotlessApply')
	if (spotless) {
		tasks.withType(JavaCompile) {
			finalizedBy(spotless)
		}

		tasks.withType(GroovyCompile) {
			finalizedBy(spotless)
		}
	}
}

// Enable logging during Gradle test execution
test {
	testLogging {
		exceptionFormat "full"
		testLogging.showStandardStreams = true
	}
}

// Configuration for SonarQube
sonar {
  properties {
    property "sonar.projectKey", "andrylat_test"
    property "sonar.organization", "andrylat"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

// Configuration for SpotBugs plugin.
spotbugs {
	ignoreFailures = true
	showProgress = true
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// Additional configuration for ErrorProne plugin
tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
}